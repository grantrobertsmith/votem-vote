// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testNameRefs(t *testing.T) {
	t.Parallel()

	query := NameRefs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testNameRefsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = nameRef.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := NameRefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNameRefsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = NameRefs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := NameRefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNameRefsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := NameRefSlice{nameRef}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := NameRefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testNameRefsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := NameRefExists(tx, nameRef.ID)
	if err != nil {
		t.Errorf("Unable to check if NameRef exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NameRefExistsG to return true, but got false.")
	}
}
func testNameRefsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	nameRefFound, err := FindNameRef(tx, nameRef.ID)
	if err != nil {
		t.Error(err)
	}

	if nameRefFound == nil {
		t.Error("want a record, got nil")
	}
}
func testNameRefsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = NameRefs(tx).Bind(nameRef); err != nil {
		t.Error(err)
	}
}

func testNameRefsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := NameRefs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNameRefsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRefOne := &NameRef{}
	nameRefTwo := &NameRef{}
	if err = randomize.Struct(seed, nameRefOne, nameRefDBTypes, false, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}
	if err = randomize.Struct(seed, nameRefTwo, nameRefDBTypes, false, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRefOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = nameRefTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := NameRefs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNameRefsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nameRefOne := &NameRef{}
	nameRefTwo := &NameRef{}
	if err = randomize.Struct(seed, nameRefOne, nameRefDBTypes, false, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}
	if err = randomize.Struct(seed, nameRefTwo, nameRefDBTypes, false, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRefOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = nameRefTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := NameRefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func nameRefBeforeInsertHook(e boil.Executor, o *NameRef) error {
	*o = NameRef{}
	return nil
}

func nameRefAfterInsertHook(e boil.Executor, o *NameRef) error {
	*o = NameRef{}
	return nil
}

func nameRefAfterSelectHook(e boil.Executor, o *NameRef) error {
	*o = NameRef{}
	return nil
}

func nameRefBeforeUpdateHook(e boil.Executor, o *NameRef) error {
	*o = NameRef{}
	return nil
}

func nameRefAfterUpdateHook(e boil.Executor, o *NameRef) error {
	*o = NameRef{}
	return nil
}

func nameRefBeforeDeleteHook(e boil.Executor, o *NameRef) error {
	*o = NameRef{}
	return nil
}

func nameRefAfterDeleteHook(e boil.Executor, o *NameRef) error {
	*o = NameRef{}
	return nil
}

func nameRefBeforeUpsertHook(e boil.Executor, o *NameRef) error {
	*o = NameRef{}
	return nil
}

func nameRefAfterUpsertHook(e boil.Executor, o *NameRef) error {
	*o = NameRef{}
	return nil
}

func testNameRefsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &NameRef{}
	o := &NameRef{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, nameRefDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NameRef object: %s", err)
	}

	AddNameRefHook(boil.BeforeInsertHook, nameRefBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	nameRefBeforeInsertHooks = []NameRefHook{}

	AddNameRefHook(boil.AfterInsertHook, nameRefAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	nameRefAfterInsertHooks = []NameRefHook{}

	AddNameRefHook(boil.AfterSelectHook, nameRefAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	nameRefAfterSelectHooks = []NameRefHook{}

	AddNameRefHook(boil.BeforeUpdateHook, nameRefBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	nameRefBeforeUpdateHooks = []NameRefHook{}

	AddNameRefHook(boil.AfterUpdateHook, nameRefAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	nameRefAfterUpdateHooks = []NameRefHook{}

	AddNameRefHook(boil.BeforeDeleteHook, nameRefBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	nameRefBeforeDeleteHooks = []NameRefHook{}

	AddNameRefHook(boil.AfterDeleteHook, nameRefAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	nameRefAfterDeleteHooks = []NameRefHook{}

	AddNameRefHook(boil.BeforeUpsertHook, nameRefBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	nameRefBeforeUpsertHooks = []NameRefHook{}

	AddNameRefHook(boil.AfterUpsertHook, nameRefAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	nameRefAfterUpsertHooks = []NameRefHook{}
}
func testNameRefsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := NameRefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNameRefsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx, nameRefColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := NameRefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNameRefToManyHumen(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a NameRef
	var b, c Human

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, humanDBTypes, false, humanColumnsWithDefault...)
	randomize.Struct(seed, &c, humanDBTypes, false, humanColumnsWithDefault...)

	b.NameRefID = a.ID
	c.NameRefID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	human, err := a.Humen(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range human {
		if v.NameRefID == b.NameRefID {
			bFound = true
		}
		if v.NameRefID == c.NameRefID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NameRefSlice{&a}
	if err = a.L.LoadHumen(tx, false, (*[]*NameRef)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Humen); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Humen = nil
	if err = a.L.LoadHumen(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Humen); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", human)
	}
}

func testNameRefToManyAddOpHumen(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a NameRef
	var b, c, d, e Human

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nameRefDBTypes, false, strmangle.SetComplement(nameRefPrimaryKeyColumns, nameRefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Human{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, humanDBTypes, false, strmangle.SetComplement(humanPrimaryKeyColumns, humanColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Human{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddHumen(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.NameRefID {
			t.Error("foreign key was wrong value", a.ID, first.NameRefID)
		}
		if a.ID != second.NameRefID {
			t.Error("foreign key was wrong value", a.ID, second.NameRefID)
		}

		if first.R.NameRef != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.NameRef != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Humen[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Humen[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Humen(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testNameRefsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = nameRef.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testNameRefsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := NameRefSlice{nameRef}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testNameRefsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := NameRefs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nameRefDBTypes = map[string]string{`FirstName`: `text`, `ID`: `uuid`, `LastName`: `text`, `MiddleName`: `text`, `Suffix`: `text`}
	_              = bytes.MinRead
)

func testNameRefsUpdate(t *testing.T) {
	t.Parallel()

	if len(nameRefColumns) == len(nameRefPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := NameRefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	if err = nameRef.Update(tx); err != nil {
		t.Error(err)
	}
}

func testNameRefsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nameRefColumns) == len(nameRefPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	nameRef := &NameRef{}
	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := NameRefs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, nameRef, nameRefDBTypes, true, nameRefPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nameRefColumns, nameRefPrimaryKeyColumns) {
		fields = nameRefColumns
	} else {
		fields = strmangle.SetComplement(
			nameRefColumns,
			nameRefPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(nameRef))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := NameRefSlice{nameRef}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testNameRefsUpsert(t *testing.T) {
	t.Parallel()

	if len(nameRefColumns) == len(nameRefPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	nameRef := NameRef{}
	if err = randomize.Struct(seed, &nameRef, nameRefDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nameRef.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert NameRef: %s", err)
	}

	count, err := NameRefs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &nameRef, nameRefDBTypes, false, nameRefPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NameRef struct: %s", err)
	}

	if err = nameRef.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert NameRef: %s", err)
	}

	count, err = NameRefs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
