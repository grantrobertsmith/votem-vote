// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Human is an object representing the database table.
type Human struct {
	VotemUhid    string      `boil:"votem_uhid" json:"votem_uhid" toml:"votem_uhid" yaml:"votem_uhid"`
	NameRefID    string      `boil:"name_ref_id" json:"name_ref_id" toml:"name_ref_id" yaml:"name_ref_id"`
	PrimaryEmail string      `boil:"primary_email" json:"primary_email" toml:"primary_email" yaml:"primary_email"`
	PrimaryPhone null.String `boil:"primary_phone" json:"primary_phone,omitempty" toml:"primary_phone" yaml:"primary_phone,omitempty"`
	Username     null.String `boil:"username" json:"username,omitempty" toml:"username" yaml:"username,omitempty"`
	PasswordHash string      `boil:"password_hash" json:"password_hash" toml:"password_hash" yaml:"password_hash"`

	R *humanR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L humanL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HumanColumns = struct {
	VotemUhid    string
	NameRefID    string
	PrimaryEmail string
	PrimaryPhone string
	Username     string
	PasswordHash string
}{
	VotemUhid:    "votem_uhid",
	NameRefID:    "name_ref_id",
	PrimaryEmail: "primary_email",
	PrimaryPhone: "primary_phone",
	Username:     "username",
	PasswordHash: "password_hash",
}

// humanR is where relationships are stored.
type humanR struct {
	NameRef *NameRef
}

// humanL is where Load methods for each relationship are stored.
type humanL struct{}

var (
	humanColumns               = []string{"votem_uhid", "name_ref_id", "primary_email", "primary_phone", "username", "password_hash"}
	humanColumnsWithoutDefault = []string{"name_ref_id", "primary_email", "primary_phone", "username", "password_hash"}
	humanColumnsWithDefault    = []string{"votem_uhid"}
	humanPrimaryKeyColumns     = []string{"votem_uhid"}
)

type (
	// HumanSlice is an alias for a slice of pointers to Human.
	// This should generally be used opposed to []Human.
	HumanSlice []*Human
	// HumanHook is the signature for custom Human hook methods
	HumanHook func(boil.Executor, *Human) error

	humanQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	humanType                 = reflect.TypeOf(&Human{})
	humanMapping              = queries.MakeStructMapping(humanType)
	humanPrimaryKeyMapping, _ = queries.BindMapping(humanType, humanMapping, humanPrimaryKeyColumns)
	humanInsertCacheMut       sync.RWMutex
	humanInsertCache          = make(map[string]insertCache)
	humanUpdateCacheMut       sync.RWMutex
	humanUpdateCache          = make(map[string]updateCache)
	humanUpsertCacheMut       sync.RWMutex
	humanUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var humanBeforeInsertHooks []HumanHook
var humanBeforeUpdateHooks []HumanHook
var humanBeforeDeleteHooks []HumanHook
var humanBeforeUpsertHooks []HumanHook

var humanAfterInsertHooks []HumanHook
var humanAfterSelectHooks []HumanHook
var humanAfterUpdateHooks []HumanHook
var humanAfterDeleteHooks []HumanHook
var humanAfterUpsertHooks []HumanHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Human) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range humanBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Human) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range humanBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Human) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range humanBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Human) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range humanBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Human) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range humanAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Human) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range humanAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Human) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range humanAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Human) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range humanAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Human) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range humanAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHumanHook registers your hook function for all future operations.
func AddHumanHook(hookPoint boil.HookPoint, humanHook HumanHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		humanBeforeInsertHooks = append(humanBeforeInsertHooks, humanHook)
	case boil.BeforeUpdateHook:
		humanBeforeUpdateHooks = append(humanBeforeUpdateHooks, humanHook)
	case boil.BeforeDeleteHook:
		humanBeforeDeleteHooks = append(humanBeforeDeleteHooks, humanHook)
	case boil.BeforeUpsertHook:
		humanBeforeUpsertHooks = append(humanBeforeUpsertHooks, humanHook)
	case boil.AfterInsertHook:
		humanAfterInsertHooks = append(humanAfterInsertHooks, humanHook)
	case boil.AfterSelectHook:
		humanAfterSelectHooks = append(humanAfterSelectHooks, humanHook)
	case boil.AfterUpdateHook:
		humanAfterUpdateHooks = append(humanAfterUpdateHooks, humanHook)
	case boil.AfterDeleteHook:
		humanAfterDeleteHooks = append(humanAfterDeleteHooks, humanHook)
	case boil.AfterUpsertHook:
		humanAfterUpsertHooks = append(humanAfterUpsertHooks, humanHook)
	}
}

// OneP returns a single human record from the query, and panics on error.
func (q humanQuery) OneP() *Human {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single human record from the query.
func (q humanQuery) One() (*Human, error) {
	o := &Human{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for human")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Human records from the query, and panics on error.
func (q humanQuery) AllP() HumanSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Human records from the query.
func (q humanQuery) All() (HumanSlice, error) {
	var o []*Human

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Human slice")
	}

	if len(humanAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Human records in the query, and panics on error.
func (q humanQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Human records in the query.
func (q humanQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count human rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q humanQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q humanQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if human exists")
	}

	return count > 0, nil
}

// NameRefG pointed to by the foreign key.
func (o *Human) NameRefG(mods ...qm.QueryMod) nameRefQuery {
	return o.NameRef(boil.GetDB(), mods...)
}

// NameRef pointed to by the foreign key.
func (o *Human) NameRef(exec boil.Executor, mods ...qm.QueryMod) nameRefQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.NameRefID),
	}

	queryMods = append(queryMods, mods...)

	query := NameRefs(exec, queryMods...)
	queries.SetFrom(query.Query, "\"name_ref\"")

	return query
} // LoadNameRef allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (humanL) LoadNameRef(e boil.Executor, singular bool, maybeHuman interface{}) error {
	var slice []*Human
	var object *Human

	count := 1
	if singular {
		object = maybeHuman.(*Human)
	} else {
		slice = *maybeHuman.(*[]*Human)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &humanR{}
		}
		args[0] = object.NameRefID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &humanR{}
			}
			args[i] = obj.NameRefID
		}
	}

	query := fmt.Sprintf(
		"select * from \"name_ref\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NameRef")
	}
	defer results.Close()

	var resultSlice []*NameRef
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NameRef")
	}

	if len(humanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.NameRef = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NameRefID == foreign.ID {
				local.R.NameRef = foreign
				break
			}
		}
	}

	return nil
}

// SetNameRefG of the human to the related item.
// Sets o.R.NameRef to related.
// Adds o to related.R.Humen.
// Uses the global database handle.
func (o *Human) SetNameRefG(insert bool, related *NameRef) error {
	return o.SetNameRef(boil.GetDB(), insert, related)
}

// SetNameRefP of the human to the related item.
// Sets o.R.NameRef to related.
// Adds o to related.R.Humen.
// Panics on error.
func (o *Human) SetNameRefP(exec boil.Executor, insert bool, related *NameRef) {
	if err := o.SetNameRef(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNameRefGP of the human to the related item.
// Sets o.R.NameRef to related.
// Adds o to related.R.Humen.
// Uses the global database handle and panics on error.
func (o *Human) SetNameRefGP(insert bool, related *NameRef) {
	if err := o.SetNameRef(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNameRef of the human to the related item.
// Sets o.R.NameRef to related.
// Adds o to related.R.Humen.
func (o *Human) SetNameRef(exec boil.Executor, insert bool, related *NameRef) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"human\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"name_ref_id"}),
		strmangle.WhereClause("\"", "\"", 2, humanPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.VotemUhid}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NameRefID = related.ID

	if o.R == nil {
		o.R = &humanR{
			NameRef: related,
		}
	} else {
		o.R.NameRef = related
	}

	if related.R == nil {
		related.R = &nameRefR{
			Humen: HumanSlice{o},
		}
	} else {
		related.R.Humen = append(related.R.Humen, o)
	}

	return nil
}

// HumenG retrieves all records.
func HumenG(mods ...qm.QueryMod) humanQuery {
	return Humen(boil.GetDB(), mods...)
}

// Humen retrieves all the records using an executor.
func Humen(exec boil.Executor, mods ...qm.QueryMod) humanQuery {
	mods = append(mods, qm.From("\"human\""))
	return humanQuery{NewQuery(exec, mods...)}
}

// FindHumanG retrieves a single record by ID.
func FindHumanG(votemUhid string, selectCols ...string) (*Human, error) {
	return FindHuman(boil.GetDB(), votemUhid, selectCols...)
}

// FindHumanGP retrieves a single record by ID, and panics on error.
func FindHumanGP(votemUhid string, selectCols ...string) *Human {
	retobj, err := FindHuman(boil.GetDB(), votemUhid, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindHuman retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHuman(exec boil.Executor, votemUhid string, selectCols ...string) (*Human, error) {
	humanObj := &Human{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"human\" where \"votem_uhid\"=$1", sel,
	)

	q := queries.Raw(exec, query, votemUhid)

	err := q.Bind(humanObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from human")
	}

	return humanObj, nil
}

// FindHumanP retrieves a single record by ID with an executor, and panics on error.
func FindHumanP(exec boil.Executor, votemUhid string, selectCols ...string) *Human {
	retobj, err := FindHuman(exec, votemUhid, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Human) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Human) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Human) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Human) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no human provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(humanColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	humanInsertCacheMut.RLock()
	cache, cached := humanInsertCache[key]
	humanInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			humanColumns,
			humanColumnsWithDefault,
			humanColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(humanType, humanMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(humanType, humanMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"human\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"human\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into human")
	}

	if !cached {
		humanInsertCacheMut.Lock()
		humanInsertCache[key] = cache
		humanInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Human record. See Update for
// whitelist behavior description.
func (o *Human) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Human record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Human) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Human, and panics on error.
// See Update for whitelist behavior description.
func (o *Human) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Human.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Human) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	humanUpdateCacheMut.RLock()
	cache, cached := humanUpdateCache[key]
	humanUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			humanColumns,
			humanPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update human, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"human\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, humanPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(humanType, humanMapping, append(wl, humanPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update human row")
	}

	if !cached {
		humanUpdateCacheMut.Lock()
		humanUpdateCache[key] = cache
		humanUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q humanQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q humanQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for human")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o HumanSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o HumanSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o HumanSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HumanSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), humanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"human\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, humanPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in human slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Human) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Human) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Human) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Human) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no human provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(humanColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	humanUpsertCacheMut.RLock()
	cache, cached := humanUpsertCache[key]
	humanUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			humanColumns,
			humanColumnsWithDefault,
			humanColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			humanColumns,
			humanPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert human, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(humanPrimaryKeyColumns))
			copy(conflict, humanPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"human\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(humanType, humanMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(humanType, humanMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert human")
	}

	if !cached {
		humanUpsertCacheMut.Lock()
		humanUpsertCache[key] = cache
		humanUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Human record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Human) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Human record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Human) DeleteG() error {
	if o == nil {
		return errors.New("models: no Human provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Human record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Human) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Human record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Human) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Human provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), humanPrimaryKeyMapping)
	sql := "DELETE FROM \"human\" WHERE \"votem_uhid\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from human")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q humanQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q humanQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no humanQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from human")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o HumanSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o HumanSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Human slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o HumanSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HumanSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Human slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(humanBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), humanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"human\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, humanPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from human slice")
	}

	if len(humanAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Human) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Human) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Human) ReloadG() error {
	if o == nil {
		return errors.New("models: no Human provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Human) Reload(exec boil.Executor) error {
	ret, err := FindHuman(exec, o.VotemUhid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *HumanSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *HumanSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HumanSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty HumanSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HumanSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	humen := HumanSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), humanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"human\".* FROM \"human\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, humanPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&humen)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HumanSlice")
	}

	*o = humen

	return nil
}

// HumanExists checks if the Human row exists.
func HumanExists(exec boil.Executor, votemUhid string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"human\" where \"votem_uhid\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, votemUhid)
	}

	row := exec.QueryRow(sql, votemUhid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if human exists")
	}

	return exists, nil
}

// HumanExistsG checks if the Human row exists.
func HumanExistsG(votemUhid string) (bool, error) {
	return HumanExists(boil.GetDB(), votemUhid)
}

// HumanExistsGP checks if the Human row exists. Panics on error.
func HumanExistsGP(votemUhid string) bool {
	e, err := HumanExists(boil.GetDB(), votemUhid)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// HumanExistsP checks if the Human row exists. Panics on error.
func HumanExistsP(exec boil.Executor, votemUhid string) bool {
	e, err := HumanExists(exec, votemUhid)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
