// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testVotedBallots(t *testing.T) {
	t.Parallel()

	query := VotedBallots(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testVotedBallotsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = votedBallot.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := VotedBallots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVotedBallotsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = VotedBallots(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := VotedBallots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVotedBallotsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VotedBallotSlice{votedBallot}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := VotedBallots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testVotedBallotsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := VotedBallotExists(tx, votedBallot.ID)
	if err != nil {
		t.Errorf("Unable to check if VotedBallot exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VotedBallotExistsG to return true, but got false.")
	}
}
func testVotedBallotsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	votedBallotFound, err := FindVotedBallot(tx, votedBallot.ID)
	if err != nil {
		t.Error(err)
	}

	if votedBallotFound == nil {
		t.Error("want a record, got nil")
	}
}
func testVotedBallotsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = VotedBallots(tx).Bind(votedBallot); err != nil {
		t.Error(err)
	}
}

func testVotedBallotsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := VotedBallots(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVotedBallotsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallotOne := &VotedBallot{}
	votedBallotTwo := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallotOne, votedBallotDBTypes, false, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}
	if err = randomize.Struct(seed, votedBallotTwo, votedBallotDBTypes, false, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallotOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = votedBallotTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := VotedBallots(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVotedBallotsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	votedBallotOne := &VotedBallot{}
	votedBallotTwo := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallotOne, votedBallotDBTypes, false, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}
	if err = randomize.Struct(seed, votedBallotTwo, votedBallotDBTypes, false, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallotOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = votedBallotTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VotedBallots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func votedBallotBeforeInsertHook(e boil.Executor, o *VotedBallot) error {
	*o = VotedBallot{}
	return nil
}

func votedBallotAfterInsertHook(e boil.Executor, o *VotedBallot) error {
	*o = VotedBallot{}
	return nil
}

func votedBallotAfterSelectHook(e boil.Executor, o *VotedBallot) error {
	*o = VotedBallot{}
	return nil
}

func votedBallotBeforeUpdateHook(e boil.Executor, o *VotedBallot) error {
	*o = VotedBallot{}
	return nil
}

func votedBallotAfterUpdateHook(e boil.Executor, o *VotedBallot) error {
	*o = VotedBallot{}
	return nil
}

func votedBallotBeforeDeleteHook(e boil.Executor, o *VotedBallot) error {
	*o = VotedBallot{}
	return nil
}

func votedBallotAfterDeleteHook(e boil.Executor, o *VotedBallot) error {
	*o = VotedBallot{}
	return nil
}

func votedBallotBeforeUpsertHook(e boil.Executor, o *VotedBallot) error {
	*o = VotedBallot{}
	return nil
}

func votedBallotAfterUpsertHook(e boil.Executor, o *VotedBallot) error {
	*o = VotedBallot{}
	return nil
}

func testVotedBallotsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &VotedBallot{}
	o := &VotedBallot{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, votedBallotDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VotedBallot object: %s", err)
	}

	AddVotedBallotHook(boil.BeforeInsertHook, votedBallotBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	votedBallotBeforeInsertHooks = []VotedBallotHook{}

	AddVotedBallotHook(boil.AfterInsertHook, votedBallotAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	votedBallotAfterInsertHooks = []VotedBallotHook{}

	AddVotedBallotHook(boil.AfterSelectHook, votedBallotAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	votedBallotAfterSelectHooks = []VotedBallotHook{}

	AddVotedBallotHook(boil.BeforeUpdateHook, votedBallotBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	votedBallotBeforeUpdateHooks = []VotedBallotHook{}

	AddVotedBallotHook(boil.AfterUpdateHook, votedBallotAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	votedBallotAfterUpdateHooks = []VotedBallotHook{}

	AddVotedBallotHook(boil.BeforeDeleteHook, votedBallotBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	votedBallotBeforeDeleteHooks = []VotedBallotHook{}

	AddVotedBallotHook(boil.AfterDeleteHook, votedBallotAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	votedBallotAfterDeleteHooks = []VotedBallotHook{}

	AddVotedBallotHook(boil.BeforeUpsertHook, votedBallotBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	votedBallotBeforeUpsertHooks = []VotedBallotHook{}

	AddVotedBallotHook(boil.AfterUpsertHook, votedBallotAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	votedBallotAfterUpsertHooks = []VotedBallotHook{}
}
func testVotedBallotsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VotedBallots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVotedBallotsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx, votedBallotColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := VotedBallots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVotedBallotsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = votedBallot.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testVotedBallotsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VotedBallotSlice{votedBallot}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testVotedBallotsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := VotedBallots(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	votedBallotDBTypes = map[string]string{`BallotIssue`: `text`, `ID`: `uuid`, `RCV`: `jsonb`, `UnexpiredTerm`: `text`, `VoteFor2`: `jsonb`}
	_                  = bytes.MinRead
)

func testVotedBallotsUpdate(t *testing.T) {
	t.Parallel()

	if len(votedBallotColumns) == len(votedBallotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VotedBallots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	if err = votedBallot.Update(tx); err != nil {
		t.Error(err)
	}
}

func testVotedBallotsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(votedBallotColumns) == len(votedBallotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	votedBallot := &VotedBallot{}
	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VotedBallots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, votedBallot, votedBallotDBTypes, true, votedBallotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(votedBallotColumns, votedBallotPrimaryKeyColumns) {
		fields = votedBallotColumns
	} else {
		fields = strmangle.SetComplement(
			votedBallotColumns,
			votedBallotPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(votedBallot))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := VotedBallotSlice{votedBallot}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testVotedBallotsUpsert(t *testing.T) {
	t.Parallel()

	if len(votedBallotColumns) == len(votedBallotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	votedBallot := VotedBallot{}
	if err = randomize.Struct(seed, &votedBallot, votedBallotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = votedBallot.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert VotedBallot: %s", err)
	}

	count, err := VotedBallots(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &votedBallot, votedBallotDBTypes, false, votedBallotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VotedBallot struct: %s", err)
	}

	if err = votedBallot.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert VotedBallot: %s", err)
	}

	count, err = VotedBallots(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
