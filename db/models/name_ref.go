// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// NameRef is an object representing the database table.
type NameRef struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	FirstName  null.String `boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	MiddleName null.String `boil:"middle_name" json:"middle_name,omitempty" toml:"middle_name" yaml:"middle_name,omitempty"`
	LastName   null.String `boil:"last_name" json:"last_name,omitempty" toml:"last_name" yaml:"last_name,omitempty"`
	Suffix     null.String `boil:"suffix" json:"suffix,omitempty" toml:"suffix" yaml:"suffix,omitempty"`

	R *nameRefR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nameRefL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NameRefColumns = struct {
	ID         string
	FirstName  string
	MiddleName string
	LastName   string
	Suffix     string
}{
	ID:         "id",
	FirstName:  "first_name",
	MiddleName: "middle_name",
	LastName:   "last_name",
	Suffix:     "suffix",
}

// nameRefR is where relationships are stored.
type nameRefR struct {
	Humen HumanSlice
}

// nameRefL is where Load methods for each relationship are stored.
type nameRefL struct{}

var (
	nameRefColumns               = []string{"id", "first_name", "middle_name", "last_name", "suffix"}
	nameRefColumnsWithoutDefault = []string{"first_name", "middle_name", "last_name", "suffix"}
	nameRefColumnsWithDefault    = []string{"id"}
	nameRefPrimaryKeyColumns     = []string{"id"}
)

type (
	// NameRefSlice is an alias for a slice of pointers to NameRef.
	// This should generally be used opposed to []NameRef.
	NameRefSlice []*NameRef
	// NameRefHook is the signature for custom NameRef hook methods
	NameRefHook func(boil.Executor, *NameRef) error

	nameRefQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nameRefType                 = reflect.TypeOf(&NameRef{})
	nameRefMapping              = queries.MakeStructMapping(nameRefType)
	nameRefPrimaryKeyMapping, _ = queries.BindMapping(nameRefType, nameRefMapping, nameRefPrimaryKeyColumns)
	nameRefInsertCacheMut       sync.RWMutex
	nameRefInsertCache          = make(map[string]insertCache)
	nameRefUpdateCacheMut       sync.RWMutex
	nameRefUpdateCache          = make(map[string]updateCache)
	nameRefUpsertCacheMut       sync.RWMutex
	nameRefUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var nameRefBeforeInsertHooks []NameRefHook
var nameRefBeforeUpdateHooks []NameRefHook
var nameRefBeforeDeleteHooks []NameRefHook
var nameRefBeforeUpsertHooks []NameRefHook

var nameRefAfterInsertHooks []NameRefHook
var nameRefAfterSelectHooks []NameRefHook
var nameRefAfterUpdateHooks []NameRefHook
var nameRefAfterDeleteHooks []NameRefHook
var nameRefAfterUpsertHooks []NameRefHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NameRef) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range nameRefBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NameRef) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range nameRefBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NameRef) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range nameRefBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NameRef) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range nameRefBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NameRef) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range nameRefAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NameRef) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range nameRefAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NameRef) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range nameRefAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NameRef) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range nameRefAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NameRef) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range nameRefAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNameRefHook registers your hook function for all future operations.
func AddNameRefHook(hookPoint boil.HookPoint, nameRefHook NameRefHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		nameRefBeforeInsertHooks = append(nameRefBeforeInsertHooks, nameRefHook)
	case boil.BeforeUpdateHook:
		nameRefBeforeUpdateHooks = append(nameRefBeforeUpdateHooks, nameRefHook)
	case boil.BeforeDeleteHook:
		nameRefBeforeDeleteHooks = append(nameRefBeforeDeleteHooks, nameRefHook)
	case boil.BeforeUpsertHook:
		nameRefBeforeUpsertHooks = append(nameRefBeforeUpsertHooks, nameRefHook)
	case boil.AfterInsertHook:
		nameRefAfterInsertHooks = append(nameRefAfterInsertHooks, nameRefHook)
	case boil.AfterSelectHook:
		nameRefAfterSelectHooks = append(nameRefAfterSelectHooks, nameRefHook)
	case boil.AfterUpdateHook:
		nameRefAfterUpdateHooks = append(nameRefAfterUpdateHooks, nameRefHook)
	case boil.AfterDeleteHook:
		nameRefAfterDeleteHooks = append(nameRefAfterDeleteHooks, nameRefHook)
	case boil.AfterUpsertHook:
		nameRefAfterUpsertHooks = append(nameRefAfterUpsertHooks, nameRefHook)
	}
}

// OneP returns a single nameRef record from the query, and panics on error.
func (q nameRefQuery) OneP() *NameRef {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single nameRef record from the query.
func (q nameRefQuery) One() (*NameRef, error) {
	o := &NameRef{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for name_ref")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all NameRef records from the query, and panics on error.
func (q nameRefQuery) AllP() NameRefSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all NameRef records from the query.
func (q nameRefQuery) All() (NameRefSlice, error) {
	var o []*NameRef

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NameRef slice")
	}

	if len(nameRefAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all NameRef records in the query, and panics on error.
func (q nameRefQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all NameRef records in the query.
func (q nameRefQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count name_ref rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q nameRefQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q nameRefQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if name_ref exists")
	}

	return count > 0, nil
}

// HumenG retrieves all the human's human.
func (o *NameRef) HumenG(mods ...qm.QueryMod) humanQuery {
	return o.Humen(boil.GetDB(), mods...)
}

// Humen retrieves all the human's human with an executor.
func (o *NameRef) Humen(exec boil.Executor, mods ...qm.QueryMod) humanQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"human\".\"name_ref_id\"=?", o.ID),
	)

	query := Humen(exec, queryMods...)
	queries.SetFrom(query.Query, "\"human\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"human\".*"})
	}

	return query
}

// LoadHumen allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (nameRefL) LoadHumen(e boil.Executor, singular bool, maybeNameRef interface{}) error {
	var slice []*NameRef
	var object *NameRef

	count := 1
	if singular {
		object = maybeNameRef.(*NameRef)
	} else {
		slice = *maybeNameRef.(*[]*NameRef)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &nameRefR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &nameRefR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"human\" where \"name_ref_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load human")
	}
	defer results.Close()

	var resultSlice []*Human
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice human")
	}

	if len(humanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Humen = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.NameRefID {
				local.R.Humen = append(local.R.Humen, foreign)
				break
			}
		}
	}

	return nil
}

// AddHumenG adds the given related objects to the existing relationships
// of the name_ref, optionally inserting them as new records.
// Appends related to o.R.Humen.
// Sets related.R.NameRef appropriately.
// Uses the global database handle.
func (o *NameRef) AddHumenG(insert bool, related ...*Human) error {
	return o.AddHumen(boil.GetDB(), insert, related...)
}

// AddHumenP adds the given related objects to the existing relationships
// of the name_ref, optionally inserting them as new records.
// Appends related to o.R.Humen.
// Sets related.R.NameRef appropriately.
// Panics on error.
func (o *NameRef) AddHumenP(exec boil.Executor, insert bool, related ...*Human) {
	if err := o.AddHumen(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddHumenGP adds the given related objects to the existing relationships
// of the name_ref, optionally inserting them as new records.
// Appends related to o.R.Humen.
// Sets related.R.NameRef appropriately.
// Uses the global database handle and panics on error.
func (o *NameRef) AddHumenGP(insert bool, related ...*Human) {
	if err := o.AddHumen(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddHumen adds the given related objects to the existing relationships
// of the name_ref, optionally inserting them as new records.
// Appends related to o.R.Humen.
// Sets related.R.NameRef appropriately.
func (o *NameRef) AddHumen(exec boil.Executor, insert bool, related ...*Human) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.NameRefID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"human\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"name_ref_id"}),
				strmangle.WhereClause("\"", "\"", 2, humanPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.VotemUhid}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.NameRefID = o.ID
		}
	}

	if o.R == nil {
		o.R = &nameRefR{
			Humen: related,
		}
	} else {
		o.R.Humen = append(o.R.Humen, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &humanR{
				NameRef: o,
			}
		} else {
			rel.R.NameRef = o
		}
	}
	return nil
}

// NameRefsG retrieves all records.
func NameRefsG(mods ...qm.QueryMod) nameRefQuery {
	return NameRefs(boil.GetDB(), mods...)
}

// NameRefs retrieves all the records using an executor.
func NameRefs(exec boil.Executor, mods ...qm.QueryMod) nameRefQuery {
	mods = append(mods, qm.From("\"name_ref\""))
	return nameRefQuery{NewQuery(exec, mods...)}
}

// FindNameRefG retrieves a single record by ID.
func FindNameRefG(id string, selectCols ...string) (*NameRef, error) {
	return FindNameRef(boil.GetDB(), id, selectCols...)
}

// FindNameRefGP retrieves a single record by ID, and panics on error.
func FindNameRefGP(id string, selectCols ...string) *NameRef {
	retobj, err := FindNameRef(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindNameRef retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNameRef(exec boil.Executor, id string, selectCols ...string) (*NameRef, error) {
	nameRefObj := &NameRef{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"name_ref\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(nameRefObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from name_ref")
	}

	return nameRefObj, nil
}

// FindNameRefP retrieves a single record by ID with an executor, and panics on error.
func FindNameRefP(exec boil.Executor, id string, selectCols ...string) *NameRef {
	retobj, err := FindNameRef(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *NameRef) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *NameRef) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *NameRef) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *NameRef) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no name_ref provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nameRefColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	nameRefInsertCacheMut.RLock()
	cache, cached := nameRefInsertCache[key]
	nameRefInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			nameRefColumns,
			nameRefColumnsWithDefault,
			nameRefColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(nameRefType, nameRefMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nameRefType, nameRefMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"name_ref\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"name_ref\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into name_ref")
	}

	if !cached {
		nameRefInsertCacheMut.Lock()
		nameRefInsertCache[key] = cache
		nameRefInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single NameRef record. See Update for
// whitelist behavior description.
func (o *NameRef) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single NameRef record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *NameRef) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the NameRef, and panics on error.
// See Update for whitelist behavior description.
func (o *NameRef) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the NameRef.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *NameRef) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	nameRefUpdateCacheMut.RLock()
	cache, cached := nameRefUpdateCache[key]
	nameRefUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			nameRefColumns,
			nameRefPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update name_ref, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"name_ref\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, nameRefPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nameRefType, nameRefMapping, append(wl, nameRefPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update name_ref row")
	}

	if !cached {
		nameRefUpdateCacheMut.Lock()
		nameRefUpdateCache[key] = cache
		nameRefUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q nameRefQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q nameRefQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for name_ref")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o NameRefSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o NameRefSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o NameRefSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NameRefSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nameRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"name_ref\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, nameRefPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in nameRef slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *NameRef) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *NameRef) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *NameRef) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *NameRef) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no name_ref provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nameRefColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nameRefUpsertCacheMut.RLock()
	cache, cached := nameRefUpsertCache[key]
	nameRefUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			nameRefColumns,
			nameRefColumnsWithDefault,
			nameRefColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			nameRefColumns,
			nameRefPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert name_ref, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(nameRefPrimaryKeyColumns))
			copy(conflict, nameRefPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"name_ref\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(nameRefType, nameRefMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nameRefType, nameRefMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert name_ref")
	}

	if !cached {
		nameRefUpsertCacheMut.Lock()
		nameRefUpsertCache[key] = cache
		nameRefUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single NameRef record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *NameRef) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single NameRef record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *NameRef) DeleteG() error {
	if o == nil {
		return errors.New("models: no NameRef provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single NameRef record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *NameRef) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single NameRef record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NameRef) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no NameRef provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nameRefPrimaryKeyMapping)
	sql := "DELETE FROM \"name_ref\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from name_ref")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q nameRefQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q nameRefQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no nameRefQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from name_ref")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o NameRefSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o NameRefSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no NameRef slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o NameRefSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NameRefSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no NameRef slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(nameRefBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nameRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"name_ref\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nameRefPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from nameRef slice")
	}

	if len(nameRefAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *NameRef) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *NameRef) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *NameRef) ReloadG() error {
	if o == nil {
		return errors.New("models: no NameRef provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NameRef) Reload(exec boil.Executor) error {
	ret, err := FindNameRef(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *NameRefSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *NameRefSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NameRefSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty NameRefSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NameRefSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	nameRefs := NameRefSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nameRefPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"name_ref\".* FROM \"name_ref\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nameRefPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&nameRefs)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NameRefSlice")
	}

	*o = nameRefs

	return nil
}

// NameRefExists checks if the NameRef row exists.
func NameRefExists(exec boil.Executor, id string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"name_ref\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if name_ref exists")
	}

	return exists, nil
}

// NameRefExistsG checks if the NameRef row exists.
func NameRefExistsG(id string) (bool, error) {
	return NameRefExists(boil.GetDB(), id)
}

// NameRefExistsGP checks if the NameRef row exists. Panics on error.
func NameRefExistsGP(id string) bool {
	e, err := NameRefExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// NameRefExistsP checks if the NameRef row exists. Panics on error.
func NameRefExistsP(exec boil.Executor, id string) bool {
	e, err := NameRefExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
