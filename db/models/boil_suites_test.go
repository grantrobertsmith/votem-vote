// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Humen", testHumen)
	t.Run("MigMigrations", testMigMigrations)
	t.Run("NameRefs", testNameRefs)
	t.Run("VotedBallots", testVotedBallots)
}

func TestDelete(t *testing.T) {
	t.Run("Humen", testHumenDelete)
	t.Run("MigMigrations", testMigMigrationsDelete)
	t.Run("NameRefs", testNameRefsDelete)
	t.Run("VotedBallots", testVotedBallotsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Humen", testHumenQueryDeleteAll)
	t.Run("MigMigrations", testMigMigrationsQueryDeleteAll)
	t.Run("NameRefs", testNameRefsQueryDeleteAll)
	t.Run("VotedBallots", testVotedBallotsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Humen", testHumenSliceDeleteAll)
	t.Run("MigMigrations", testMigMigrationsSliceDeleteAll)
	t.Run("NameRefs", testNameRefsSliceDeleteAll)
	t.Run("VotedBallots", testVotedBallotsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Humen", testHumenExists)
	t.Run("MigMigrations", testMigMigrationsExists)
	t.Run("NameRefs", testNameRefsExists)
	t.Run("VotedBallots", testVotedBallotsExists)
}

func TestFind(t *testing.T) {
	t.Run("Humen", testHumenFind)
	t.Run("MigMigrations", testMigMigrationsFind)
	t.Run("NameRefs", testNameRefsFind)
	t.Run("VotedBallots", testVotedBallotsFind)
}

func TestBind(t *testing.T) {
	t.Run("Humen", testHumenBind)
	t.Run("MigMigrations", testMigMigrationsBind)
	t.Run("NameRefs", testNameRefsBind)
	t.Run("VotedBallots", testVotedBallotsBind)
}

func TestOne(t *testing.T) {
	t.Run("Humen", testHumenOne)
	t.Run("MigMigrations", testMigMigrationsOne)
	t.Run("NameRefs", testNameRefsOne)
	t.Run("VotedBallots", testVotedBallotsOne)
}

func TestAll(t *testing.T) {
	t.Run("Humen", testHumenAll)
	t.Run("MigMigrations", testMigMigrationsAll)
	t.Run("NameRefs", testNameRefsAll)
	t.Run("VotedBallots", testVotedBallotsAll)
}

func TestCount(t *testing.T) {
	t.Run("Humen", testHumenCount)
	t.Run("MigMigrations", testMigMigrationsCount)
	t.Run("NameRefs", testNameRefsCount)
	t.Run("VotedBallots", testVotedBallotsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Humen", testHumenHooks)
	t.Run("MigMigrations", testMigMigrationsHooks)
	t.Run("NameRefs", testNameRefsHooks)
	t.Run("VotedBallots", testVotedBallotsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Humen", testHumenInsert)
	t.Run("Humen", testHumenInsertWhitelist)
	t.Run("MigMigrations", testMigMigrationsInsert)
	t.Run("MigMigrations", testMigMigrationsInsertWhitelist)
	t.Run("NameRefs", testNameRefsInsert)
	t.Run("NameRefs", testNameRefsInsertWhitelist)
	t.Run("VotedBallots", testVotedBallotsInsert)
	t.Run("VotedBallots", testVotedBallotsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("HumanToNameRefUsingNameRef", testHumanToOneNameRefUsingNameRef)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("NameRefToHumen", testNameRefToManyHumen)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("HumanToNameRefUsingNameRef", testHumanToOneSetOpNameRefUsingNameRef)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("NameRefToHumen", testNameRefToManyAddOpHumen)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Humen", testHumenReload)
	t.Run("MigMigrations", testMigMigrationsReload)
	t.Run("NameRefs", testNameRefsReload)
	t.Run("VotedBallots", testVotedBallotsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Humen", testHumenReloadAll)
	t.Run("MigMigrations", testMigMigrationsReloadAll)
	t.Run("NameRefs", testNameRefsReloadAll)
	t.Run("VotedBallots", testVotedBallotsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Humen", testHumenSelect)
	t.Run("MigMigrations", testMigMigrationsSelect)
	t.Run("NameRefs", testNameRefsSelect)
	t.Run("VotedBallots", testVotedBallotsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Humen", testHumenUpdate)
	t.Run("MigMigrations", testMigMigrationsUpdate)
	t.Run("NameRefs", testNameRefsUpdate)
	t.Run("VotedBallots", testVotedBallotsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Humen", testHumenSliceUpdateAll)
	t.Run("MigMigrations", testMigMigrationsSliceUpdateAll)
	t.Run("NameRefs", testNameRefsSliceUpdateAll)
	t.Run("VotedBallots", testVotedBallotsSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Humen", testHumenUpsert)
	t.Run("MigMigrations", testMigMigrationsUpsert)
	t.Run("NameRefs", testNameRefsUpsert)
	t.Run("VotedBallots", testVotedBallotsUpsert)
}
