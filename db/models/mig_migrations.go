// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// MigMigration is an object representing the database table.
type MigMigration struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	VersionID int64     `boil:"version_id" json:"version_id" toml:"version_id" yaml:"version_id"`
	IsApplied bool      `boil:"is_applied" json:"is_applied" toml:"is_applied" yaml:"is_applied"`
	Tstamp    null.Time `boil:"tstamp" json:"tstamp,omitempty" toml:"tstamp" yaml:"tstamp,omitempty"`

	R *migMigrationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L migMigrationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MigMigrationColumns = struct {
	ID        string
	VersionID string
	IsApplied string
	Tstamp    string
}{
	ID:        "id",
	VersionID: "version_id",
	IsApplied: "is_applied",
	Tstamp:    "tstamp",
}

// migMigrationR is where relationships are stored.
type migMigrationR struct {
}

// migMigrationL is where Load methods for each relationship are stored.
type migMigrationL struct{}

var (
	migMigrationColumns               = []string{"id", "version_id", "is_applied", "tstamp"}
	migMigrationColumnsWithoutDefault = []string{"version_id", "is_applied"}
	migMigrationColumnsWithDefault    = []string{"id", "tstamp"}
	migMigrationPrimaryKeyColumns     = []string{"id"}
)

type (
	// MigMigrationSlice is an alias for a slice of pointers to MigMigration.
	// This should generally be used opposed to []MigMigration.
	MigMigrationSlice []*MigMigration
	// MigMigrationHook is the signature for custom MigMigration hook methods
	MigMigrationHook func(boil.Executor, *MigMigration) error

	migMigrationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	migMigrationType                 = reflect.TypeOf(&MigMigration{})
	migMigrationMapping              = queries.MakeStructMapping(migMigrationType)
	migMigrationPrimaryKeyMapping, _ = queries.BindMapping(migMigrationType, migMigrationMapping, migMigrationPrimaryKeyColumns)
	migMigrationInsertCacheMut       sync.RWMutex
	migMigrationInsertCache          = make(map[string]insertCache)
	migMigrationUpdateCacheMut       sync.RWMutex
	migMigrationUpdateCache          = make(map[string]updateCache)
	migMigrationUpsertCacheMut       sync.RWMutex
	migMigrationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var migMigrationBeforeInsertHooks []MigMigrationHook
var migMigrationBeforeUpdateHooks []MigMigrationHook
var migMigrationBeforeDeleteHooks []MigMigrationHook
var migMigrationBeforeUpsertHooks []MigMigrationHook

var migMigrationAfterInsertHooks []MigMigrationHook
var migMigrationAfterSelectHooks []MigMigrationHook
var migMigrationAfterUpdateHooks []MigMigrationHook
var migMigrationAfterDeleteHooks []MigMigrationHook
var migMigrationAfterUpsertHooks []MigMigrationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MigMigration) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range migMigrationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MigMigration) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range migMigrationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MigMigration) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range migMigrationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MigMigration) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range migMigrationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MigMigration) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range migMigrationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MigMigration) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range migMigrationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MigMigration) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range migMigrationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MigMigration) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range migMigrationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MigMigration) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range migMigrationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMigMigrationHook registers your hook function for all future operations.
func AddMigMigrationHook(hookPoint boil.HookPoint, migMigrationHook MigMigrationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		migMigrationBeforeInsertHooks = append(migMigrationBeforeInsertHooks, migMigrationHook)
	case boil.BeforeUpdateHook:
		migMigrationBeforeUpdateHooks = append(migMigrationBeforeUpdateHooks, migMigrationHook)
	case boil.BeforeDeleteHook:
		migMigrationBeforeDeleteHooks = append(migMigrationBeforeDeleteHooks, migMigrationHook)
	case boil.BeforeUpsertHook:
		migMigrationBeforeUpsertHooks = append(migMigrationBeforeUpsertHooks, migMigrationHook)
	case boil.AfterInsertHook:
		migMigrationAfterInsertHooks = append(migMigrationAfterInsertHooks, migMigrationHook)
	case boil.AfterSelectHook:
		migMigrationAfterSelectHooks = append(migMigrationAfterSelectHooks, migMigrationHook)
	case boil.AfterUpdateHook:
		migMigrationAfterUpdateHooks = append(migMigrationAfterUpdateHooks, migMigrationHook)
	case boil.AfterDeleteHook:
		migMigrationAfterDeleteHooks = append(migMigrationAfterDeleteHooks, migMigrationHook)
	case boil.AfterUpsertHook:
		migMigrationAfterUpsertHooks = append(migMigrationAfterUpsertHooks, migMigrationHook)
	}
}

// OneP returns a single migMigration record from the query, and panics on error.
func (q migMigrationQuery) OneP() *MigMigration {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single migMigration record from the query.
func (q migMigrationQuery) One() (*MigMigration, error) {
	o := &MigMigration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mig_migrations")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all MigMigration records from the query, and panics on error.
func (q migMigrationQuery) AllP() MigMigrationSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all MigMigration records from the query.
func (q migMigrationQuery) All() (MigMigrationSlice, error) {
	var o []*MigMigration

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MigMigration slice")
	}

	if len(migMigrationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all MigMigration records in the query, and panics on error.
func (q migMigrationQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all MigMigration records in the query.
func (q migMigrationQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mig_migrations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q migMigrationQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q migMigrationQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mig_migrations exists")
	}

	return count > 0, nil
}

// MigMigrationsG retrieves all records.
func MigMigrationsG(mods ...qm.QueryMod) migMigrationQuery {
	return MigMigrations(boil.GetDB(), mods...)
}

// MigMigrations retrieves all the records using an executor.
func MigMigrations(exec boil.Executor, mods ...qm.QueryMod) migMigrationQuery {
	mods = append(mods, qm.From("\"mig_migrations\""))
	return migMigrationQuery{NewQuery(exec, mods...)}
}

// FindMigMigrationG retrieves a single record by ID.
func FindMigMigrationG(id int, selectCols ...string) (*MigMigration, error) {
	return FindMigMigration(boil.GetDB(), id, selectCols...)
}

// FindMigMigrationGP retrieves a single record by ID, and panics on error.
func FindMigMigrationGP(id int, selectCols ...string) *MigMigration {
	retobj, err := FindMigMigration(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindMigMigration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMigMigration(exec boil.Executor, id int, selectCols ...string) (*MigMigration, error) {
	migMigrationObj := &MigMigration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mig_migrations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(migMigrationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mig_migrations")
	}

	return migMigrationObj, nil
}

// FindMigMigrationP retrieves a single record by ID with an executor, and panics on error.
func FindMigMigrationP(exec boil.Executor, id int, selectCols ...string) *MigMigration {
	retobj, err := FindMigMigration(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MigMigration) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *MigMigration) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *MigMigration) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *MigMigration) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no mig_migrations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(migMigrationColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	migMigrationInsertCacheMut.RLock()
	cache, cached := migMigrationInsertCache[key]
	migMigrationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			migMigrationColumns,
			migMigrationColumnsWithDefault,
			migMigrationColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(migMigrationType, migMigrationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(migMigrationType, migMigrationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mig_migrations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mig_migrations\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mig_migrations")
	}

	if !cached {
		migMigrationInsertCacheMut.Lock()
		migMigrationInsertCache[key] = cache
		migMigrationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single MigMigration record. See Update for
// whitelist behavior description.
func (o *MigMigration) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single MigMigration record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *MigMigration) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the MigMigration, and panics on error.
// See Update for whitelist behavior description.
func (o *MigMigration) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the MigMigration.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *MigMigration) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	migMigrationUpdateCacheMut.RLock()
	cache, cached := migMigrationUpdateCache[key]
	migMigrationUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			migMigrationColumns,
			migMigrationPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update mig_migrations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mig_migrations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, migMigrationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(migMigrationType, migMigrationMapping, append(wl, migMigrationPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update mig_migrations row")
	}

	if !cached {
		migMigrationUpdateCacheMut.Lock()
		migMigrationUpdateCache[key] = cache
		migMigrationUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q migMigrationQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q migMigrationQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for mig_migrations")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MigMigrationSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o MigMigrationSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o MigMigrationSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MigMigrationSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), migMigrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mig_migrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, migMigrationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in migMigration slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MigMigration) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *MigMigration) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *MigMigration) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *MigMigration) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no mig_migrations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(migMigrationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	migMigrationUpsertCacheMut.RLock()
	cache, cached := migMigrationUpsertCache[key]
	migMigrationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			migMigrationColumns,
			migMigrationColumnsWithDefault,
			migMigrationColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			migMigrationColumns,
			migMigrationPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert mig_migrations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(migMigrationPrimaryKeyColumns))
			copy(conflict, migMigrationPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"mig_migrations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(migMigrationType, migMigrationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(migMigrationType, migMigrationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mig_migrations")
	}

	if !cached {
		migMigrationUpsertCacheMut.Lock()
		migMigrationUpsertCache[key] = cache
		migMigrationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single MigMigration record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *MigMigration) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single MigMigration record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MigMigration) DeleteG() error {
	if o == nil {
		return errors.New("models: no MigMigration provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single MigMigration record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *MigMigration) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single MigMigration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MigMigration) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no MigMigration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), migMigrationPrimaryKeyMapping)
	sql := "DELETE FROM \"mig_migrations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from mig_migrations")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q migMigrationQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q migMigrationQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no migMigrationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from mig_migrations")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o MigMigrationSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o MigMigrationSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no MigMigration slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o MigMigrationSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MigMigrationSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no MigMigration slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(migMigrationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), migMigrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mig_migrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, migMigrationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from migMigration slice")
	}

	if len(migMigrationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *MigMigration) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *MigMigration) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MigMigration) ReloadG() error {
	if o == nil {
		return errors.New("models: no MigMigration provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MigMigration) Reload(exec boil.Executor) error {
	ret, err := FindMigMigration(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MigMigrationSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MigMigrationSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MigMigrationSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty MigMigrationSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MigMigrationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	migMigrations := MigMigrationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), migMigrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mig_migrations\".* FROM \"mig_migrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, migMigrationPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&migMigrations)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MigMigrationSlice")
	}

	*o = migMigrations

	return nil
}

// MigMigrationExists checks if the MigMigration row exists.
func MigMigrationExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mig_migrations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mig_migrations exists")
	}

	return exists, nil
}

// MigMigrationExistsG checks if the MigMigration row exists.
func MigMigrationExistsG(id int) (bool, error) {
	return MigMigrationExists(boil.GetDB(), id)
}

// MigMigrationExistsGP checks if the MigMigration row exists. Panics on error.
func MigMigrationExistsGP(id int) bool {
	e, err := MigMigrationExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// MigMigrationExistsP checks if the MigMigration row exists. Panics on error.
func MigMigrationExistsP(exec boil.Executor, id int) bool {
	e, err := MigMigrationExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
