type pgTester struct {
	dbConn *sql.DB

	Env string
	DB  abcconfig.DBConfig

	pgPassFile string
	testDBName string
}

type DBConfig struct {
	Env string             `toml:"env" mapstructure:"env" env:"ENV"`
	DB  abcconfig.DBConfig `toml:"db" mapstructure:"db"`
}

func init() {
	dbMain = &pgTester{}
}

// setup dumps the database schema and imports it into a temporary randomly
// generated test database so that tests can be run against it using the
// generated sqlboiler ORM package.
func (p *pgTester) setup() error {
	var err error

	c := abcconfig.NewConfig(git.GetAppName())
	c.File = filepath.Join(git.GetAppPath(), "config.toml")
	c.LoadEnv = "test"
	dbCfg := &DBConfig{}

	_, err = c.Bind(nil, dbCfg)
	if err != nil {
		return err
	}

	p.Env = dbCfg.Env
	p.DB = dbCfg.DB

	// Create a randomized db name.
	p.testDBName = randomize.StableDBName(p.DB.DBName)

	if err = p.makePGPassFile(); err != nil {
		return err
	}

	if err = p.dropTestDB(); err != nil {
		return err
	}
	if err = p.createTestDB(); err != nil {
		return err
	}

	dumpCmd := exec.Command("pg_dump", "--schema-only", p.DB.DBName)
	dumpCmd.Env = append(os.Environ(), p.pgEnv()...)
	createCmd := exec.Command("psql", p.testDBName)
	createCmd.Env = append(os.Environ(), p.pgEnv()...)

	r, w := io.Pipe()
	dumpCmd.Stdout = w
	createCmd.Stdin = newFKeyDestroyer(rgxPGFkey, r)

	if err = dumpCmd.Start(); err != nil {
		return errors.Wrap(err, "failed to start pg_dump command")
	}
	if err = createCmd.Start(); err != nil {
		return errors.Wrap(err, "failed to start psql command")
	}

	if err = dumpCmd.Wait(); err != nil {
		fmt.Println(err)
		return errors.Wrap(err, "failed to wait for pg_dump command")
	}

	w.Close() // After dumpCmd is done, close the write end of the pipe

	if err = createCmd.Wait(); err != nil {
		fmt.Println(err)
		return errors.Wrap(err, "failed to wait for psql command")
	}

	return nil
}

func (p *pgTester) runCmd(stdin, command string, args ...string) error {
	cmd := exec.Command(command, args...)
	cmd.Env = append(os.Environ(), p.pgEnv()...)

	if len(stdin) != 0 {
		cmd.Stdin = strings.NewReader(stdin)
	}

	stdout := &bytes.Buffer{}
	stderr := &bytes.Buffer{}
	cmd.Stdout = stdout
	cmd.Stderr = stderr
	if err := cmd.Run(); err != nil {
		fmt.Println("failed running:", command, args)
		fmt.Println(stdout.String())
		fmt.Println(stderr.String())
		return err
	}

	return nil
}

func (p *pgTester) pgEnv() []string {
	return []string{
		fmt.Sprintf("PGHOST=%s", p.DB.Host),
		fmt.Sprintf("PGPORT=%d", p.DB.Port),
		fmt.Sprintf("PGUSER=%s", p.DB.User),
		fmt.Sprintf("PGPASSFILE=%s", p.pgPassFile),
	}
}

func (p *pgTester) makePGPassFile() error {
	tmp, err := ioutil.TempFile("", "pgpass")
	if err != nil {
		return errors.Wrap(err, "failed to create option file")
	}

	fmt.Fprintf(tmp, "%s:%d:postgres:%s", p.DB.Host, p.DB.Port, p.DB.User)
	if len(p.DB.Pass) != 0 {
		fmt.Fprintf(tmp, ":%s", p.DB.Pass)
	}
	fmt.Fprintln(tmp)

	fmt.Fprintf(tmp, "%s:%d:%s:%s", p.DB.Host, p.DB.Port, p.DB.DBName, p.DB.User)
	if len(p.DB.Pass) != 0 {
		fmt.Fprintf(tmp, ":%s", p.DB.Pass)
	}
	fmt.Fprintln(tmp)

	fmt.Fprintf(tmp, "%s:%d:%s:%s", p.DB.Host, p.DB.Port, p.testDBName, p.DB.User)
	if len(p.DB.Pass) != 0 {
		fmt.Fprintf(tmp, ":%s", p.DB.Pass)
	}
	fmt.Fprintln(tmp)

	p.pgPassFile = tmp.Name()
	return tmp.Close()
}

func (p *pgTester) createTestDB() error {
	return p.runCmd("", "createdb", p.testDBName)
}

func (p *pgTester) dropTestDB() error {
	return p.runCmd("", "dropdb", "--if-exists", p.testDBName)
}

// teardown executes cleanup tasks when the tests finish running
func (p *pgTester) teardown() error {
	var err error
	if err = p.dbConn.Close(); err != nil {
		return err
	}
	p.dbConn = nil

	if err = p.dropTestDB(); err != nil {
		return err
	}

	return os.Remove(p.pgPassFile)
}

func (p *pgTester) conn() (*sql.DB, error) {
	if p.dbConn != nil {
		return p.dbConn, nil
	}

	var err error
	p.dbConn, err = sql.Open("postgres", drivers.PostgresBuildQueryString(p.DB.User, p.DB.Pass, p.testDBName, p.DB.Host, p.DB.Port, p.DB.SSLMode))
	if err != nil {
		return nil, err
	}

	return p.dbConn, nil
}
